generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Website {
  id        String   @id @default(cuid())
  url       String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  scans     Scan[]
}

model Scan {
  id        String          @id @default(cuid())
  websiteId String
  content   String         @db.Text
  createdAt DateTime       @default(now())
  website   Website        @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  errors    SpellingError[]
}

model SpellingError {
  id         String   @id @default(cuid())
  scanId     String
  word       String
  suggestion String
  context    String
  position   Int
  scan       Scan     @relation(fields: [scanId], references: [id], onDelete: Cascade)
} 